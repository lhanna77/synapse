{
	"name": "Query Azure Cosmos DB from a Spark pool",
	"properties": {
		"folder": {
			"name": "AdventureWorks Cosmos DB database"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "LHSparkPool",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "f6724120-5833-42da-ae50-ee002d940f45"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "python"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/05174b2b-36c5-447e-a3b3-c8f02ccb85dc/resourceGroups/lh-synapse-rg/providers/Microsoft.Synapse/workspaces/lh-synapse-ws/bigDataPools/LHSparkPool",
				"name": "LHSparkPool",
				"type": "Spark",
				"endpoint": "https://lh-synapse-ws.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/LHSparkPool",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Query Azure Cosmos DB from Azure Synapse Analytics"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"# Read from Cosmos DB analytical store into a Spark DataFrame and display 10 rows from the DataFrame\n",
					"# To select a preferred list of regions in a multi-region Cosmos DB account, add .option(\"spark.cosmos.preferredRegions\", \"<Region1>,<Region2>\")\n",
					"\n",
					"df = spark.read\\\n",
					"    .format(\"cosmos.olap\")\\\n",
					"    .option(\"spark.synapse.linkedService\", \"CosmosDbNoSql_AdventureWorks\")\\\n",
					"    .option(\"spark.cosmos.container\", \"Sales\")\\\n",
					"    .load()\n",
					"\n",
					"display(df.limit(10))"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					" customerdetails_df = df.select(\"customerid\", \"customerdetails.*\")\r\n",
					" display(customerdetails_df)"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					}
				},
				"source": [
					" %%sql\r\n",
					"\r\n",
					" -- Create a logical database in the Spark metastore\r\n",
					" CREATE DATABASE salesdb;\r\n",
					"\r\n",
					" USE salesdb;\r\n",
					"\r\n",
					" -- Create a table from the Cosmos DB container\r\n",
					" CREATE TABLE salesorders using cosmos.olap options (\r\n",
					"     spark.synapse.linkedService 'AdventureWorks',\r\n",
					"     spark.cosmos.container 'Sales'\r\n",
					" );\r\n",
					"\r\n",
					" -- Query the table\r\n",
					" SELECT *\r\n",
					" FROM salesorders;"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					}
				},
				"source": [
					"%%sql\r\n",
					"\r\n",
					"SELECT id, orderdate, customerdetails.customername, product\r\n",
					"FROM salesorders\r\n",
					"ORDER BY id;"
				],
				"execution_count": null
			}
		]
	}
}